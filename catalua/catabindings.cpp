// This file was automatically generated by catalua/generate_bindings.lua
static int ter_t_get_name(lua_State *L) {
    ter_t** ter_t_instance = (ter_t**) lua_touserdata(L, 1);

    if(!ter_t_instance) {
        return luaL_error(L, "First argument to ter_t_get_name is not a ter_t");
    }
    lua_pushstring(L, (*ter_t_instance)->name.c_str());
    return 1;  // 1 return value
}
static int ter_t_get_movecost(lua_State *L) {
    ter_t** ter_t_instance = (ter_t**) lua_touserdata(L, 1);

    if(!ter_t_instance) {
        return luaL_error(L, "First argument to ter_t_get_movecost is not a ter_t");
    }
    lua_pushnumber(L, (*ter_t_instance)->movecost);
    return 1;  // 1 return value
}
static int monster_get_moves(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to monster_get_moves is not a monster");
    }
    lua_pushnumber(L, (*monster_instance)->moves);
    return 1;  // 1 return value
}
static int monster_set_moves(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to monster_set_moves is not a monster");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int value = (int) lua_tonumber(L, 2);
    (*monster_instance)->moves = value;
    return 0;  // 0 return values
}
static int monster_get_hp(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to monster_get_hp is not a monster");
    }
    lua_pushnumber(L, (*monster_instance)->hp);
    return 1;  // 1 return value
}
static int monster_set_hp(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to monster_set_hp is not a monster");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int value = (int) lua_tonumber(L, 2);
    (*monster_instance)->hp = value;
    return 0;  // 0 return values
}
static int monster_get_friendly(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to monster_get_friendly is not a monster");
    }
    lua_pushnumber(L, (*monster_instance)->friendly);
    return 1;  // 1 return value
}
static int monster_set_friendly(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to monster_set_friendly is not a monster");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int value = (int) lua_tonumber(L, 2);
    (*monster_instance)->friendly = value;
    return 0;  // 0 return values
}
static int uimenu_get_selected(lua_State *L) {
    uimenu** uimenu_instance = (uimenu**) lua_touserdata(L, 1);

    if(!uimenu_instance) {
        return luaL_error(L, "First argument to uimenu_get_selected is not a uimenu");
    }
    lua_pushnumber(L, (*uimenu_instance)->selected);
    return 1;  // 1 return value
}
static int uimenu_get_title(lua_State *L) {
    uimenu** uimenu_instance = (uimenu**) lua_touserdata(L, 1);

    if(!uimenu_instance) {
        return luaL_error(L, "First argument to uimenu_get_title is not a uimenu");
    }
    lua_pushstring(L, (*uimenu_instance)->title.c_str());
    return 1;  // 1 return value
}
static int uimenu_set_title(lua_State *L) {
    uimenu** uimenu_instance = (uimenu**) lua_touserdata(L, 1);

    if(!uimenu_instance) {
        return luaL_error(L, "First argument to uimenu_set_title is not a uimenu");
    }
    luaL_checktype(L, 2, LUA_TSTRING);
    std::string value = (std::string) lua_tostring(L, 2);
    (*uimenu_instance)->title = value;
    return 0;  // 0 return values
}
static int player_get_thirst(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_thirst is not a player");
    }
    lua_pushnumber(L, (*player_instance)->thirst);
    return 1;  // 1 return value
}
static int player_set_thirst(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_set_thirst is not a player");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int value = (int) lua_tonumber(L, 2);
    (*player_instance)->thirst = value;
    return 0;  // 0 return values
}
static int player_get_per_cur(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_per_cur is not a player");
    }
    lua_pushnumber(L, (*player_instance)->per_cur);
    return 1;  // 1 return value
}
static int player_get_stim(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_stim is not a player");
    }
    lua_pushnumber(L, (*player_instance)->stim);
    return 1;  // 1 return value
}
static int player_set_stim(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_set_stim is not a player");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int value = (int) lua_tonumber(L, 2);
    (*player_instance)->stim = value;
    return 0;  // 0 return values
}
static int player_get_male(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_male is not a player");
    }
    lua_pushboolean(L, (*player_instance)->male);
    return 1;  // 1 return value
}
static int player_get_posy(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_posy is not a player");
    }
    lua_pushnumber(L, (*player_instance)->posy);
    return 1;  // 1 return value
}
static int player_get_int_cur(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_int_cur is not a player");
    }
    lua_pushnumber(L, (*player_instance)->int_cur);
    return 1;  // 1 return value
}
static int player_get_str_cur(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_str_cur is not a player");
    }
    lua_pushnumber(L, (*player_instance)->str_cur);
    return 1;  // 1 return value
}
static int player_get_dex_cur(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_dex_cur is not a player");
    }
    lua_pushnumber(L, (*player_instance)->dex_cur);
    return 1;  // 1 return value
}
static int player_get_per_max(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_per_max is not a player");
    }
    lua_pushnumber(L, (*player_instance)->per_max);
    return 1;  // 1 return value
}
static int player_get_fatigue(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_fatigue is not a player");
    }
    lua_pushnumber(L, (*player_instance)->fatigue);
    return 1;  // 1 return value
}
static int player_set_fatigue(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_set_fatigue is not a player");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int value = (int) lua_tonumber(L, 2);
    (*player_instance)->fatigue = value;
    return 0;  // 0 return values
}
static int player_get_posx(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_posx is not a player");
    }
    lua_pushnumber(L, (*player_instance)->posx);
    return 1;  // 1 return value
}
static int player_get_hunger(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_hunger is not a player");
    }
    lua_pushnumber(L, (*player_instance)->hunger);
    return 1;  // 1 return value
}
static int player_set_hunger(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_set_hunger is not a player");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int value = (int) lua_tonumber(L, 2);
    (*player_instance)->hunger = value;
    return 0;  // 0 return values
}
static int player_get_str_max(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_str_max is not a player");
    }
    lua_pushnumber(L, (*player_instance)->str_max);
    return 1;  // 1 return value
}
static int player_get_int_max(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_int_max is not a player");
    }
    lua_pushnumber(L, (*player_instance)->int_max);
    return 1;  // 1 return value
}
static int player_get_name(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_name is not a player");
    }
    lua_pushstring(L, (*player_instance)->name.c_str());
    return 1;  // 1 return value
}
static int player_get_health(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_health is not a player");
    }
    lua_pushnumber(L, (*player_instance)->health);
    return 1;  // 1 return value
}
static int player_get_dex_max(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to player_get_dex_max is not a player");
    }
    lua_pushnumber(L, (*player_instance)->dex_max);
    return 1;  // 1 return value
}
static int item_made_of(lua_State *L) {
    item** item_instance = (item**) lua_touserdata(L, 1);

    if(!item_instance) {
        return luaL_error(L, "First argument to made_of is not a item. Did you use foo.bar() instead of foo:bar()?");
    }
    std::string parameter1 = (std::string) lua_tostring(L, 2);
    int rval = (*item_instance)->made_of(parameter1);
    lua_pushboolean(L, rval);
    return 1; // 1 return values
}
static int item_tname(lua_State *L) {
    item** item_instance = (item**) lua_touserdata(L, 1);

    if(!item_instance) {
        return luaL_error(L, "First argument to tname is not a item. Did you use foo.bar() instead of foo:bar()?");
    }
    std::string rval = (*item_instance)->tname(g);
    lua_pushstring(L, rval.c_str());
    return 1; // 1 return values
}
static int map_ter(lua_State *L) {
    map** map_instance = (map**) lua_touserdata(L, 1);

    if(!map_instance) {
        return luaL_error(L, "First argument to ter is not a map. Did you use foo.bar() instead of foo:bar()?");
    }
    int parameter1 = (int) lua_tonumber(L, 2);
    int parameter2 = (int) lua_tonumber(L, 3);
    int rval = (*map_instance)->ter(parameter1, parameter2);
    lua_pushnumber(L, rval);
    return 1; // 1 return values
}
static int monster_posy(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to posy is not a monster. Did you use foo.bar() instead of foo:bar()?");
    }
    int rval = (*monster_instance)->posy();
    lua_pushnumber(L, rval);
    return 1; // 1 return values
}
static int monster_posx(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to posx is not a monster. Did you use foo.bar() instead of foo:bar()?");
    }
    int rval = (*monster_instance)->posx();
    lua_pushnumber(L, rval);
    return 1; // 1 return values
}
static int monster_name(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to name is not a monster. Did you use foo.bar() instead of foo:bar()?");
    }
    std::string rval = (*monster_instance)->name();
    lua_pushstring(L, rval.c_str());
    return 1; // 1 return values
}
static int monster_attack_at(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to attack_at is not a monster. Did you use foo.bar() instead of foo:bar()?");
    }
    int parameter1 = (int) lua_tonumber(L, 2);
    int parameter2 = (int) lua_tonumber(L, 3);
    int rval = (*monster_instance)->attack_at(parameter1, parameter2);
    lua_pushnumber(L, rval);
    return 1; // 1 return values
}
static int monster_make_friendly(lua_State *L) {
    monster** monster_instance = (monster**) lua_touserdata(L, 1);

    if(!monster_instance) {
        return luaL_error(L, "First argument to make_friendly is not a monster. Did you use foo.bar() instead of foo:bar()?");
    }
    (*monster_instance)->make_friendly();
    return 0; // 0 return values
}
static int uimenu_show(lua_State *L) {
    uimenu** uimenu_instance = (uimenu**) lua_touserdata(L, 1);

    if(!uimenu_instance) {
        return luaL_error(L, "First argument to show is not a uimenu. Did you use foo.bar() instead of foo:bar()?");
    }
    (*uimenu_instance)->show();
    return 0; // 0 return values
}
static int uimenu_addentry(lua_State *L) {
    uimenu** uimenu_instance = (uimenu**) lua_touserdata(L, 1);

    if(!uimenu_instance) {
        return luaL_error(L, "First argument to addentry is not a uimenu. Did you use foo.bar() instead of foo:bar()?");
    }
    std::string parameter1 = (std::string) lua_tostring(L, 2);
    (*uimenu_instance)->addentry(parameter1);
    return 0; // 0 return values
}
static int uimenu_query(lua_State *L) {
    uimenu** uimenu_instance = (uimenu**) lua_touserdata(L, 1);

    if(!uimenu_instance) {
        return luaL_error(L, "First argument to query is not a uimenu. Did you use foo.bar() instead of foo:bar()?");
    }
    int parameter1 = (int) lua_toboolean(L, 2);
    (*uimenu_instance)->query(parameter1);
    return 0; // 0 return values
}
static int player_rem_disease(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to rem_disease is not a player. Did you use foo.bar() instead of foo:bar()?");
    }
    std::string parameter1 = (std::string) lua_tostring(L, 2);
    (*player_instance)->rem_disease(parameter1);
    return 0; // 0 return values
}
static int player_has_disease(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to has_disease is not a player. Did you use foo.bar() instead of foo:bar()?");
    }
    std::string parameter1 = (std::string) lua_tostring(L, 2);
    int rval = (*player_instance)->has_disease(parameter1);
    lua_pushboolean(L, rval);
    return 1; // 1 return values
}
static int player_add_disease(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to add_disease is not a player. Did you use foo.bar() instead of foo:bar()?");
    }
    std::string parameter1 = (std::string) lua_tostring(L, 2);
    int parameter2 = (int) lua_tonumber(L, 3);
    int parameter3 = (int) lua_tonumber(L, 4);
    int parameter4 = (int) lua_tonumber(L, 5);
    (*player_instance)->add_disease(parameter1, parameter2, parameter3, parameter4);
    return 0; // 0 return values
}
static int player_is_npc(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to is_npc is not a player. Did you use foo.bar() instead of foo:bar()?");
    }
    int rval = (*player_instance)->is_npc();
    lua_pushboolean(L, rval);
    return 1; // 1 return values
}
static int player_morale_level(lua_State *L) {
    player** player_instance = (player**) lua_touserdata(L, 1);

    if(!player_instance) {
        return luaL_error(L, "First argument to morale_level is not a player. Did you use foo.bar() instead of foo:bar()?");
    }
    int rval = (*player_instance)->morale_level();
    lua_pushnumber(L, rval);
    return 1; // 1 return values
}
static int create_uimenu(lua_State *L) {
    uimenu* rval = (uimenu*)create_uimenu();
    if(rval == NULL) { lua_pushnil(L); } else {uimenu** userdata_rval = (uimenu**) lua_newuserdata(L, sizeof(uimenu*));*userdata_rval = (uimenu*)rval;luah_setmetatable(L, "uimenu_metatable");}
    return 1; // 1 return values
}
static int get_terrain_type(lua_State *L) {
    int parameter1 = (int) lua_tonumber(L, 1);
    ter_t* rval = (ter_t*)get_terrain_type(parameter1);
    if(rval == NULL) { lua_pushnil(L); } else {ter_t** userdata_rval = (ter_t**) lua_newuserdata(L, sizeof(ter_t*));*userdata_rval = (ter_t*)rval;luah_setmetatable(L, "ter_t_metatable");}
    return 1; // 1 return values
}
static int remove_item(lua_State *L) {
    int parameter1 = (int) lua_tonumber(L, 1);
    int parameter2 = (int) lua_tonumber(L, 2);
    item* parameter3 = (item*) lua_touserdata(L, 3);
    game_remove_item(parameter1, parameter2, parameter3);
    return 0; // 0 return values
}
static int trig_dist(lua_State *L) {
    int parameter1 = (int) lua_tonumber(L, 1);
    int parameter2 = (int) lua_tonumber(L, 2);
    int parameter3 = (int) lua_tonumber(L, 3);
    int parameter4 = (int) lua_tonumber(L, 4);
    int rval = (int)trig_dist(parameter1, parameter2, parameter3, parameter4);
    lua_pushnumber(L, rval);
    return 1; // 1 return values
}
static int rng(lua_State *L) {
    int parameter1 = (int) lua_tonumber(L, 1);
    int parameter2 = (int) lua_tonumber(L, 2);
    int rval = (int)rng(parameter1, parameter2);
    lua_pushnumber(L, rval);
    return 1; // 1 return values
}
static int string_input_popup(lua_State *L) {
    std::string parameter1 = (std::string) lua_tostring(L, 1);
    int parameter2 = (int) lua_tonumber(L, 2);
    std::string parameter3 = (std::string) lua_tostring(L, 3);
    std::string rval = (std::string)string_input_popup(parameter1, parameter2, parameter3);
    lua_pushstring(L, rval.c_str());
    return 1; // 1 return values
}
static int distance(lua_State *L) {
    int parameter1 = (int) lua_tonumber(L, 1);
    int parameter2 = (int) lua_tonumber(L, 2);
    int parameter3 = (int) lua_tonumber(L, 3);
    int parameter4 = (int) lua_tonumber(L, 4);
    int rval = (int)rl_dist(parameter1, parameter2, parameter3, parameter4);
    lua_pushnumber(L, rval);
    return 1; // 1 return values
}
static int add_msg(lua_State *L) {
    const char* parameter1 = (const char*) lua_tostring(L, 1);
    g->add_msg(parameter1);
    return 0; // 0 return values
}
static const struct luaL_Reg gamelib [] = {
    {"item_made_of", item_made_of},
    {"item_tname", item_tname},
    {"map_ter", map_ter},
    {"ter_t_get_name", ter_t_get_name},
    {"ter_t_get_movecost", ter_t_get_movecost},
    {"monster_get_moves", monster_get_moves},
    {"monster_set_moves", monster_set_moves},
    {"monster_get_hp", monster_get_hp},
    {"monster_set_hp", monster_set_hp},
    {"monster_get_friendly", monster_get_friendly},
    {"monster_set_friendly", monster_set_friendly},
    {"monster_posy", monster_posy},
    {"monster_posx", monster_posx},
    {"monster_name", monster_name},
    {"monster_attack_at", monster_attack_at},
    {"monster_make_friendly", monster_make_friendly},
    {"uimenu_get_selected", uimenu_get_selected},
    {"uimenu_get_title", uimenu_get_title},
    {"uimenu_set_title", uimenu_set_title},
    {"uimenu_show", uimenu_show},
    {"uimenu_addentry", uimenu_addentry},
    {"uimenu_query", uimenu_query},
    {"player_get_thirst", player_get_thirst},
    {"player_set_thirst", player_set_thirst},
    {"player_get_per_cur", player_get_per_cur},
    {"player_get_stim", player_get_stim},
    {"player_set_stim", player_set_stim},
    {"player_get_male", player_get_male},
    {"player_get_posy", player_get_posy},
    {"player_get_int_cur", player_get_int_cur},
    {"player_get_str_cur", player_get_str_cur},
    {"player_get_dex_cur", player_get_dex_cur},
    {"player_get_per_max", player_get_per_max},
    {"player_get_fatigue", player_get_fatigue},
    {"player_set_fatigue", player_set_fatigue},
    {"player_get_posx", player_get_posx},
    {"player_get_hunger", player_get_hunger},
    {"player_set_hunger", player_set_hunger},
    {"player_get_str_max", player_get_str_max},
    {"player_get_int_max", player_get_int_max},
    {"player_get_name", player_get_name},
    {"player_get_health", player_get_health},
    {"player_get_dex_max", player_get_dex_max},
    {"player_rem_disease", player_rem_disease},
    {"player_has_disease", player_has_disease},
    {"player_add_disease", player_add_disease},
    {"player_is_npc", player_is_npc},
    {"player_morale_level", player_morale_level},
    {"create_uimenu", create_uimenu},
    {"get_terrain_type", get_terrain_type},
    {"remove_item", remove_item},
    {"trig_dist", trig_dist},
    {"rng", rng},
    {"string_input_popup", string_input_popup},
    {"distance", distance},
    {"add_msg", add_msg},
    {NULL, NULL}
};
